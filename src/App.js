
import React, { useState, useEffect, useRef } from 'react';
// --- Assuming SupplierDashboard is in a file named SupplierDashboard.js ---
import SupplierDashboard from './SupplierDashboard'; 
import ClickSpark from './blocks/Animations/ClickSpark/ClickSpark';

// --- IMPORTANT: Use your computer's Network IP Address here, not localhost ---
const API_BASE_URL = 'https://rendor-saathi-backend.onrender.com/api'; // Replace with your actual IP

// --- Helper SVG Icons ---
const VendorIcon = () => <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" /></svg>;
const SupplierIcon = () => <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10l2 2h8a1 1 0 001-1zM13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10l2 2h8a1 1 0 001-1z" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h2a1 1 0 001-1V6a1 1 0 00-1-1h-2v11z" /></svg>;
const LogoutIcon = () => <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" /></svg>;
const StarIcon = ({ filled, onClick }) => <svg className={`w-6 h-6 ${filled ? 'text-yellow-400' : 'text-gray-300'} ${onClick ? 'cursor-pointer' : ''}`} onClick={onClick} fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" /></svg>;
const RefreshIcon = () => <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h5M20 20v-5h-5M20 4s-1.5-2-4-2-4 2-4 2M4 20s1.5 2 4 2 4-2 4-2" /></svg>;

// --- Landing Page Components ---
const FeatureCard = ({ icon, title, children }) => ( <div className="bg-white p-6 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300"> <div className="text-4xl mb-4 text-[#c96a43]">{icon}</div> <h3 className="text-xl font-bold text-[#44332d] mb-2">{title}</h3> <p className="text-[#6e665f]">{children}</p> </div> );
const TestimonialCard = ({ quote, author, role }) => ( <div className="bg-white p-8 rounded-2xl shadow-lg"> <p className="text-[#6e665f] italic mb-4">"{quote}"</p> <p className="font-bold text-[#44332d]">{author}</p> <p className="text-sm text-[#c96a43]">{role}</p> </div> );
const CategoryPill = ({ name, image }) => ( <div className="relative rounded-full shadow-lg overflow-hidden h-32 w-32 flex-shrink-0 snap-center"> <img src={image} alt={name} className="w-full h-full object-cover" /> <div className="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center"> <span className="text-white font-bold text-lg">{name}</span> </div> </div> );
const Header = ({ onLoginClick, onRegisterClick }) => ( <header className="absolute top-0 left-0 right-0 z-10 py-4"> <div className="container mx-auto px-4 sm:px-6 flex justify-between items-center"> <div className="text-2xl font-bold text-white">Vendor <span className="text-gray-200">Saathi</span></div> <div className="hidden md:flex items-center space-x-4"> <button onClick={onLoginClick} className="text-white font-medium hover:text-gray-200 transition-colors">Login</button> <button onClick={onRegisterClick} className="bg-white text-[#c96a43] font-bold py-2 px-5 rounded-full hover:bg-gray-100 transition-all">Sign Up</button> </div> </div> </header> );
const Hero = ({ onVendorClick, onSupplierClick }) => ( <section className="relative bg-cover bg-center text-white h-[70vh] min-h-[500px] flex items-center" style={{ backgroundImage: "linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url('https://i.postimg.cc/2jW91BWS/banner.png')" }}> <div className="container mx-auto px-4 sm:px-6 text-center"> <h1 className="text-4xl md:text-6xl font-extrabold leading-tight mb-6">Aapka Digital Saathi</h1> <p className="text-lg md:text-xl max-w-2xl mx-auto mb-8 text-gray-200">The all-in-one platform to manage, grow, and simplify your food business.</p> <div className="bg-white rounded-lg max-w-2xl mx-auto p-4 flex flex-col md:flex-row items-center gap-4 shadow-2xl"> <p className="font-semibold text-lg text-[#44332d]">Get Started As A...</p> <div className="w-full flex flex-col sm:flex-row gap-4"> <button onClick={onVendorClick} className="w-full flex justify-center items-center bg-[#f9f4ef] text-[#44332d] font-bold py-3 px-6 rounded-lg hover:bg-[#d2c5b8] transition-all"><VendorIcon /> Vendor</button> <button onClick={onSupplierClick} className="w-full flex justify-center items-center bg-[#c96a43] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#a35835] transition-all"><SupplierIcon /> Supplier</button> </div> </div> </div> </section> );
const WhyChooseUs = () => ( <section className="bg-[#f9f4ef] py-16 md:py-24"> <div className="container mx-auto px-4 sm:px-6"> <div className="text-center mb-12"> <h2 className="text-3xl md:text-4xl font-bold text-[#44332d]">More Than Just an App</h2> <p className="text-[#6e665f] mt-2 max-w-2xl mx-auto">We provide the tools you need to succeed in today's competitive market.</p> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8"> <FeatureCard icon="📈" title="AI Demand Forecasting">Predict your daily sales with AI-powered insights based on weather, events, and holidays to reduce waste.</FeatureCard> <FeatureCard icon="💰" title="Profit Calculator">Easily track your daily income and expenses to see your net profit and manage your finances better.</FeatureCard> <FeatureCard icon="♻️" title="Leftover Marketplace">Sell your extra raw materials to other nearby vendors at the end of the day. Turn potential waste into profit!</FeatureCard> <FeatureCard icon="🚚" title="Equipment on EMI">Need a new stove or cart? Request essential equipment through our app on easy lease or EMI options.</FeatureCard> </div> </div> </section> );
const FeaturedCategories = () => ( <section className="py-16 md:py-24"> <div className="container mx-auto px-4 sm:px-6"> <div className="text-center mb-12"> <h2 className="text-3xl md:text-4xl font-bold text-[#44332d]">Explore Popular Categories</h2> <p className="text-[#6e665f] mt-2 max-w-2xl mx-auto">Find suppliers for everything you need, all in one place.</p> </div> <div className="flex gap-6 pb-4 snap-x overflow-x-auto"> <CategoryPill name="Vegetables" image="https://placehold.co/200x200/228B22/FFFFFF?text=Veggies" /> <CategoryPill name="Spices" image="https://placehold.co/200x200/D2691E/FFFFFF?text=Spices" /> <CategoryPill name="Dairy" image="https://placehold.co/200x200/F5F5DC/000000?text=Dairy" /> <CategoryPill name="Oils" image="https://placehold.co/200x200/FFD700/FFFFFF?text=Oils" /> <CategoryPill name="Breads" image="https://placehold.co/200x200/DEB887/FFFFFF?text=Breads" /> <CategoryPill name="Sauces" image="https://placehold.co/200x200/B22222/FFFFFF?text=Sauces" /> </div> </div> </section> );
const Testimonials = () => ( <section className="bg-[#f9f4ef] py-16 md:py-24"> <div className="container mx-auto px-4 sm:px-6"> <div className="text-center mb-12"> <h2 className="text-3xl md:text-4xl font-bold text-[#44332d]">From Our Vendors</h2> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-8"> <TestimonialCard author="Raju Kumar" role="Samosa Vendor, Kamla Nagar" quote="The profit calculator is a game-changer! I finally know exactly how much I'm earning each day." /> <TestimonialCard author="Priya Singh" role="Chaat Vendor, Sadar Bazaar" quote="Finding a reliable spice supplier was always a headache. With Vendor Saathi, I found three in my area and now get the best rates." /> <TestimonialCard author="Amit Sharma" role="Dosa Vendor, Tajganj" quote="The AI forecast told me to expect more customers during the cricket match. I prepared extra batter and sold out completely!" /> </div> </div> </section> );
const Footer = () => ( <footer className="bg-[#44332d] text-white"> <div className="container mx-auto px-4 sm:px-6 py-8 text-center"> <p>&copy; 2025 Vendor Saathi. All Rights Reserved.</p> <div className="mt-4 flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-6"> <a href="#" className="text-gray-300 hover:text-[#c96a43]">Terms of Service</a> <a href="#" className="text-gray-300 hover:text-[#c96a43]">Privacy Policy</a> </div> </div> </footer> );

// --- Auth Flow Components ---
const RoleChoice = ({ role, onLogin, onRegister, onBack }) => ( <div className="min-h-screen flex flex-col items-center justify-center bg-[#f9f4ef] p-4"> <div className="w-full max-w-md bg-white rounded-2xl shadow-xl p-6 sm:p-8"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4">&larr; Back to Home</button> <h1 className="text-2xl sm:text-3xl font-bold text-center text-[#44332d] mb-2">I am a {role}</h1> <p className="text-center text-[#6e665f] mb-8">What would you like to do?</p> <div className="flex flex-col gap-4"> <button onClick={onLogin} className="w-full bg-[#c96a43] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#a35835] transition-all">Login</button> <button onClick={onRegister} className="w-full bg-[#d2c5b8] text-[#44332d] font-bold py-3 px-6 rounded-lg hover:bg-[#a35835] hover:text-white transition-all">Register</button> </div> </div> </div> );
const VendorAuthForm = ({ view, onLoginSuccess, onBack }) => { const [step, setStep] = useState(1); const [mobileNumber, setMobileNumber] = useState(''); const [otp, setOtp] = useState(''); const [name, setName] = useState(''); const [businessType, setBusinessType] = useState(''); const [area, setArea] = useState(''); const [message, setMessage] = useState(''); const [isLoading, setIsLoading] = useState(false); const API_URL = `${API_BASE_URL}/auth`; const handleSendOtp = async (e) => { e.preventDefault(); setIsLoading(true); setMessage(''); const endpoint = view.toLowerCase().includes('register') ? '/vendor/register' : '/vendor/login'; try { const response = await fetch(`${API_URL}${endpoint}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ mobileNumber }) }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setMessage(data.message); setStep(2); } catch (error) { setMessage(error.message); } finally { setIsLoading(false); } }; const handleVerify = async (e) => { e.preventDefault(); setIsLoading(true); setMessage(''); const endpoint = view.toLowerCase().includes('register') ? '/vendor/verify' : '/vendor/login/verify'; const body = view.toLowerCase().includes('register') ? { mobileNumber, otp, name, businessType, area } : { mobileNumber, otp }; try { const response = await fetch(`${API_URL}${endpoint}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) }); const data = await response.json(); if (!response.ok) throw new Error(data.message); localStorage.setItem('token', data.token); onLoginSuccess(data.vendor); } catch (error) { setMessage(error.message); } finally { setIsLoading(false); } }; const title = view.toLowerCase().includes('login') ? 'Login' : 'Registration'; return ( <div className="min-h-screen flex flex-col items-center justify-center bg-[#f9f4ef] p-4"> <div className="w-full max-w-md bg-white rounded-2xl shadow-xl p-6 sm:p-8"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4">&larr; Back to Home</button> <h1 className="text-2xl sm:text-3xl font-bold text-center text-[#44332d] mb-6">{`Vendor ${title}`}</h1> {step === 1 && ( <form onSubmit={handleSendOtp} className="space-y-6"> <h2 className="text-center text-[#6e665f]">Step 1: Enter Mobile Number</h2> <input type="tel" value={mobileNumber} onChange={(e) => setMobileNumber(e.target.value)} placeholder="10-digit mobile number" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <button type="submit" disabled={isLoading} className="w-full bg-[#c96a43] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#a35835] transition-all disabled:bg-gray-400">{isLoading ? 'Sending...' : 'Send OTP'}</button> </form> )} {step === 2 && ( <form onSubmit={handleVerify} className="space-y-4"> <h2 className="text-center text-[#6e665f]">Step 2: Verify & Complete</h2> {view.toLowerCase().includes('register') && (<> <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Your Name / Business Name" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input type="text" value={businessType} onChange={(e) => setBusinessType(e.target.value)} placeholder="Type of food (e.g., Samosa)" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input type="text" value={area} onChange={(e) => setArea(e.target.value)} placeholder="Your Area (e.g., Kamla Nagar)" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> </>)} <input type="text" value={otp} onChange={(e) => setOtp(e.target.value)} placeholder="4-digit OTP" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <button type="submit" disabled={isLoading} className="w-full bg-[#c96a43] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#a35835] transition-all disabled:bg-gray-400">{isLoading ? 'Verifying...' : (title)}</button> </form> )} {message && <p className="text-center mt-4 text-red-500">{message}</p>} </div> </div> ); };
const SupplierAuthForm = ({ view, onLoginSuccess, onBack }) => { const [formData, setFormData] = useState({ businessName: '', name: '', email: '', password: '', mobileNumber: '', warehouseAddress: '', area: '', gstin: '', fssaiLicense: '', yearEstablished: '', suppliesCategories: [], providesDelivery: false }); const [message, setMessage] = useState(''); const [isLoading, setIsLoading] = useState(false); const API_URL = `${API_BASE_URL}/auth`; const ALL_CATEGORIES = ["Vegetables", "Fruits", "Dairy", "Spices", "Oils", "Breads", "Sauces", "Dal & Rice"]; const handleChange = (e) => { const { name, value, type, checked } = e.target; setFormData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value })); }; const handleCategoryChange = (category) => { setFormData(prev => { const newCategories = prev.suppliesCategories.includes(category) ? prev.suppliesCategories.filter(c => c !== category) : [...prev.suppliesCategories, category]; return { ...prev, suppliesCategories: newCategories }; }); }; const handleSubmit = async (e) => { e.preventDefault(); setIsLoading(true); setMessage(''); const endpoint = view === 'login' ? '/supplier/login' : '/supplier/register'; const body = view === 'login' ? { email: formData.email, password: formData.password } : formData; try { const response = await fetch(`${API_URL}${endpoint}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) }); const data = await response.json(); if (!response.ok) throw new Error(data.message); if (view === 'login') { localStorage.setItem('token', data.token); onLoginSuccess(data.supplier); } else { setMessage(data.message); } } catch (error) { setMessage(error.message); } finally { setIsLoading(false); } }; const isLogin = view === 'login'; return ( <div className="min-h-screen flex flex-col items-center justify-center bg-[#f9f4ef] p-4"> <div className="w-full max-w-lg bg-white rounded-2xl shadow-xl p-6 sm:p-8"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4">&larr; Back to Home</button> <h1 className="text-2xl sm:text-3xl font-bold text-center text-[#44332d] mb-6">Supplier {isLogin ? 'Login' : 'Registration'}</h1> <form onSubmit={handleSubmit} className="space-y-4"> <input name="email" type="email" value={formData.email} onChange={handleChange} placeholder="Email Address" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input name="password" type="password" value={formData.password} onChange={handleChange} placeholder="Password" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> {!isLogin && (<> <input name="businessName" type="text" value={formData.businessName} onChange={handleChange} placeholder="Business Name" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input name="name" type="text" value={formData.name} onChange={handleChange} placeholder="Contact Person Name" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input name="mobileNumber" type="tel" value={formData.mobileNumber} onChange={handleChange} placeholder="Contact Mobile Number" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input name="warehouseAddress" type="text" value={formData.warehouseAddress} onChange={handleChange} placeholder="Full Warehouse/Shop Address" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input name="area" type="text" value={formData.area} onChange={handleChange} placeholder="Your Area (e.g., Kamla Nagar)" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input name="gstin" type="text" value={formData.gstin} onChange={handleChange} placeholder="GST Number (GSTIN)" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input name="fssaiLicense" type="text" value={formData.fssaiLicense} onChange={handleChange} placeholder="FSSAI License Number (Optional)" className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <input name="yearEstablished" type="number" value={formData.yearEstablished} onChange={handleChange} placeholder="Year Established (e.g., 2010)" required className="w-full px-4 py-3 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> <div> <label className="text-sm font-medium text-[#6e665f]">What do you supply? (Select all that apply)</label> <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 mt-2"> {ALL_CATEGORIES.map(cat => ( <label key={cat} className={`p-2 border rounded-lg text-center text-sm cursor-pointer ${formData.suppliesCategories.includes(cat) ? 'bg-[#c96a43] text-white border-[#c96a43]' : 'border-[#d2c5b8]'}`}> <input type="checkbox" checked={formData.suppliesCategories.includes(cat)} onChange={() => handleCategoryChange(cat)} className="hidden" /> {cat} </label> ))} </div> </div> <label className="flex items-center space-x-3"> <input name="providesDelivery" type="checkbox" checked={formData.providesDelivery} onChange={handleChange} className="h-5 w-5 rounded text-[#c96a43] focus:ring-[#a35835]" /> <span className="text-[#6e665f]">We provide delivery to vendors</span> </label> </>)} <button type="submit" disabled={isLoading} className="w-full bg-[#c96a43] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#a35835] transition-all disabled:bg-gray-400">{isLoading ? 'Processing...' : (isLogin ? 'Login' : 'Register')}</button> </form> {message && <p className={`text-center mt-4 ${message.includes('successful') ? 'text-green-600' : 'text-red-500'}`}>{message}</p>} </div> </div> ); };

// --- Dashboard & Marketplace Components ---
const StatCard = ({ title, value, icon, color }) => ( <div className={`bg-white p-6 rounded-2xl shadow-lg flex items-center`}> <div className={`text-3xl p-3 rounded-full mr-4 ${color}`}> {icon} </div> <div> <p className="text-sm font-medium text-[#6e665f]">{title}</p> <p className="text-2xl font-bold text-[#44332d]">{value}</p> </div> </div> );
const ActionCard = ({ title, description, buttonText, icon, onClick }) => ( <div className="bg-white p-6 rounded-2xl shadow-lg flex flex-col justify-between"> <div> <div className="flex items-center mb-2"> <span className="text-xl text-[#c96a43] mr-3">{icon}</span> <h3 className="text-xl font-bold text-[#44332d]">{title}</h3> </div> <p className="text-[#6e665f] mb-4">{description}</p> </div> <button onClick={onClick} className="w-full bg-[#d2c5b8] text-[#44332d] font-bold py-2 px-4 rounded-lg hover:bg-[#a35835] hover:text-white transition-all"> {buttonText} </button> </div> );
const ProfitCalculator = ({ onCalculate, initialExpenses, onExpensesChange }) => { const [sales, setSales] = useState(''); const [expenses, setExpenses] = useState(initialExpenses); useEffect(() => { setExpenses(initialExpenses); }, [initialExpenses]); const handleExpensesChange = (e) => { const value = e.target.value; setExpenses(value); onExpensesChange(Number(value) || 0); }; const handleSubmit = (e) => { e.preventDefault(); const netProfit = Number(sales) - Number(expenses); if (!isNaN(netProfit)) { onCalculate(netProfit); } }; return ( <div className="bg-white p-6 rounded-2xl shadow-lg"> <h3 className="text-xl font-bold text-[#44332d] mb-4">Profit Calculator</h3> <form onSubmit={handleSubmit} className="space-y-4"> <div> <label className="text-sm font-medium text-[#6e665f]">Today's Total Sales (₹)</label> <input type="number" value={sales} onChange={(e) => setSales(e.target.value)} placeholder="e.g., 3500" required className="w-full mt-1 px-4 py-2 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> </div> <div> <label className="text-sm font-medium text-[#6e665f]">Today's Raw Material Costs (₹)</label> <input type="number" value={expenses} onChange={handleExpensesChange} placeholder="e.g., 1200" required className="w-full mt-1 px-4 py-2 border border-[#d2c5b8] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#a35835]" /> </div> <button type="submit" className="w-full bg-[#c96a43] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#a35835] transition-all">Calculate Today's Profit</button> </form> </div> ); };
const VendorDashboard = ({ user, onLogout, onNavigate, onOrderPlaced }) => { const [todaysProfit, setTodaysProfit] = useState(0); const [todaysExpenses, setTodaysExpenses] = useState(0); const [forecast, setForecast] = useState({ message: 'Loading...', icon: '⏳' }); const [isRefreshing, setIsRefreshing] = useState(false); useEffect(() => { onOrderPlaced.current = (orderTotal) => { setTodaysExpenses(prev => Number(prev) + orderTotal); }; }, [onOrderPlaced]); const fetchForecast = async () => { if (user && user.area) { setIsRefreshing(true); try { const response = await fetch(`${API_BASE_URL}/forecast?area=${encodeURIComponent(user.area)}`); const data = await response.json(); if (response.ok) { setForecast(data); } else { setForecast({ message: 'Forecast unavailable', icon: '❓' }); } } catch (error) { setForecast({ message: 'Forecast unavailable', icon: '❓' }); } finally { setIsRefreshing(false); } } }; useEffect(() => { fetchForecast(); }, [user]); return ( <div className="min-h-screen bg-[#f9f4ef]"> <header className="bg-white shadow-sm"> <div className="container mx-auto px-4 sm:px-6 py-4 flex justify-between items-center"> <div> <h1 className="text-xl sm:text-2xl font-bold text-[#44332d]">Welcome back, {user?.name || 'Vendor'}!</h1> <p className="text-sm text-[#6e665f]">Here's your business summary for today.</p> </div> <div className="flex items-center gap-4"> <button onClick={fetchForecast} disabled={isRefreshing} className="flex items-center bg-white text-[#44332d] font-bold py-2 px-4 rounded-lg hover:bg-gray-100 border transition-all disabled:opacity-50"> <RefreshIcon /> <span className="hidden sm:inline">{isRefreshing ? 'Refreshing...' : 'Refresh'}</span> </button> <button onClick={onLogout} className="flex items-center bg-[#44332d] text-white font-bold py-2 px-4 rounded-lg hover:bg-black transition-all"> <LogoutIcon /> <span className="hidden sm:inline">Logout</span> </button> </div> </div> </header> <main className="container mx-auto p-4 sm:p-6 space-y-8"> <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6"> <StatCard title="Today's Net Profit" value={`₹ ${todaysProfit.toFixed(2)}`} icon="💰" color="bg-green-100 text-green-600" /> <StatCard title="Total Material Cost" value={`₹ ${Number(todaysExpenses).toFixed(2)}`} icon="🛒" color="bg-orange-100 text-orange-600" /> <StatCard title="AI Demand Forecast" value={forecast.message} icon={forecast.icon} color="bg-blue-100 text-blue-600" /> </div> <div className="grid grid-cols-1 lg:grid-cols-3 gap-8"> <div className="lg:col-span-1"> <ProfitCalculator onCalculate={setTodaysProfit} initialExpenses={todaysExpenses} onExpensesChange={setTodaysExpenses} /> </div> <div className="lg:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-6"> <ActionCard title="Raw Material Marketplace" description="Find nearby suppliers for fresh ingredients." buttonText="Find Suppliers" icon="🛒" onClick={() => onNavigate('marketplace')} /> <ActionCard title="Leftover Marketplace" description="Sell your extra raw materials to nearby vendors and reduce waste." buttonText="View Marketplace" icon="♻️" onClick={() => onNavigate('leftoverMarketplace')} /> <ActionCard title="My Menu & Recipes" description="Manage your dishes and add recipes to unlock smart suggestions." buttonText="Manage Menu" icon="📋" onClick={() => onNavigate('myMenu')} /> <ActionCard title="My Rewards" description="View your collected rewards, badges, and special offers." buttonText="View Rewards" icon="🏆" onClick={() => onNavigate('rewards')} /> </div> </div> </main> </div> ); };
const SupplierDetailPage = ({ supplier, onBack, user, onOrderPlaced }) => { const [reviews, setReviews] = useState([]); const [products, setProducts] = useState([]); const [cart, setCart] = useState({}); const [message, setMessage] = useState(''); const [isLoading, setIsLoading] = useState(true); const [newReviewText, setNewReviewText] = useState(''); const [newReviewRating, setNewReviewRating] = useState(5); const totalAmount = Object.entries(cart).reduce((sum, [productId, quantity]) => { const product = products.find(p => p._id === productId); return sum + (product ? product.price * Number(quantity) : 0); }, 0); useEffect(() => { const fetchData = async () => { try { const [reviewsRes, productsRes] = await Promise.all([ fetch(`${API_BASE_URL}/reviews/supplier/${supplier.id}`), fetch(`${API_BASE_URL}/products/supplier/${supplier.id}`) ]); const reviewsData = await reviewsRes.json(); const productsData = await productsRes.json(); setReviews(reviewsData); setProducts(productsData); } catch (error) { console.error("Failed to fetch supplier details", error); } finally { setIsLoading(false); } }; fetchData(); }, [supplier.id]); const handleQuantityChange = (productId, quantity) => { setCart(prev => ({ ...prev, [productId]: Math.max(0, quantity) })); }; const handlePlaceOrder = async () => { const orderItems = Object.entries(cart).filter(([, qty]) => qty > 0).map(([productId, quantity]) => { const product = products.find(p => p._id === productId); return { productId, name: product.name, quantity, price: product.price }; }); if (orderItems.length === 0) { setMessage("Your cart is empty."); return; } const orderData = { vendorId: user.id, supplierId: supplier.id, items: orderItems, totalAmount }; try { const response = await fetch(`${API_BASE_URL}/orders`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(orderData) }); if (!response.ok) throw new Error("Failed to place order."); onOrderPlaced(totalAmount); setMessage("✅ Order placed successfully!"); setCart({}); } catch (error) { setMessage(error.message); } }; const handleReviewSubmit = async (e) => { e.preventDefault(); const reviewData = { supplierId: supplier.id, vendorId: user.id, vendorName: user.name, rating: newReviewRating, text: newReviewText, }; try { const response = await fetch(`${API_BASE_URL}/reviews`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(reviewData), }); const savedReview = await response.json(); if (!response.ok) throw new Error("Failed to submit review"); setReviews(prev => [savedReview, ...prev]); setNewReviewText(''); setNewReviewRating(5); } catch (error) { console.error("Review submission error:", error); } }; return ( <div className="min-h-screen bg-[#f9f4ef] p-4 sm:p-6"> <div className="container mx-auto"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4 font-semibold">&larr; Back to Suppliers</button> <div className="grid grid-cols-1 lg:grid-cols-3 gap-8"> <div className="lg:col-span-2 space-y-8"> <div className="bg-white rounded-2xl shadow-xl p-6 md:p-8"> <h1 className="text-3xl md:text-4xl font-bold text-[#44332d]">{supplier.businessName}</h1> <p className="text-md text-[#6e665f]">Contact: {supplier.contactName}</p> <p className="text-md text-[#6e665f]">Area: {supplier.area}</p> <p className="text-sm text-gray-500 mt-1">Established Since: {supplier.yearEstablished}</p> <div className="mt-6"> <h3 className="text-lg font-bold text-[#44332d] mb-2">Supplies:</h3> <div className="flex flex-wrap gap-2"> {supplier.suppliesCategories.map(cat => <span key={cat} className="bg-[#d2c5b8] text-[#44332d] text-sm font-semibold px-3 py-1 rounded-full">{cat}</span>)} </div> </div> </div> <div className="bg-white rounded-2xl shadow-xl p-6 md:p-8"> <h3 className="text-xl font-bold text-[#44332d] mb-4">Place an Order</h3> {isLoading ? <p>Loading products...</p> : ( <div> {products.map(p => ( <div key={p._id} className="flex justify-between items-center border-b py-2"> <div> <p className="font-semibold">{p.name}</p> <p className="text-sm text-gray-500">₹{p.price} / {p.unit}</p> </div> <div className="flex items-center gap-2"> <input type="number" value={cart[p._id] || 0} onChange={e => handleQuantityChange(p._id, parseInt(e.target.value))} className="w-16 text-center border rounded" /> </div> </div> ))} <div className="flex justify-between items-center mt-4 pt-4 border-t"> <span className="text-lg font-bold text-[#44332d]">Total:</span> <span className="text-xl font-bold text-[#44332d]">₹{totalAmount.toFixed(2)}</span> </div> <button onClick={handlePlaceOrder} className="w-full mt-4 bg-[#c96a43] text-white font-bold py-3 px-6 rounded-lg hover:bg-[#a35835] transition-all text-lg">Place Order</button> </div> )} {message && <p className="text-center mt-4 text-green-600">{message}</p>} </div> </div> <div className="lg:col-span-1"> <div className="bg-white rounded-2xl shadow-xl p-6 md:p-8"> <h3 className="text-xl font-bold text-[#44332d] mb-4">Reviews ({reviews.length})</h3> <div className="space-y-4 mb-6 max-h-96 overflow-y-auto"> {reviews.map(review => ( <div key={review._id || review.id} className="border-b pb-4"> <div className="flex items-center mb-1"> <p className="font-bold text-[#44332d] mr-2">{review.vendorName || review.author}</p> <div className="flex">{[...Array(5)].map((_, i) => <StarIcon key={i} filled={i < review.rating} />)}</div> </div> <p className="text-[#6e665f]">{review.text}</p> </div> ))} </div> <form onSubmit={handleReviewSubmit}> <h4 className="font-bold text-[#44332d] mb-2">Leave a Review</h4> <div className="flex items-center mb-2">{[...Array(5)].map((_, i) => <StarIcon key={i} filled={i < newReviewRating} onClick={() => setNewReviewRating(i + 1)} />)}</div> <textarea value={newReviewText} onChange={(e) => setNewReviewText(e.target.value)} className="w-full p-2 border border-[#d2c5b8] rounded-lg" rows="3" placeholder="Share your experience..." required></textarea> <button type="submit" className="mt-2 w-full bg-[#44332d] text-white font-bold py-2 px-4 rounded-lg hover:bg-black">Submit Review</button> </form> </div> </div> </div> </div> </div> ); };
const CategoryCard = ({ name, icon, isSelected, onSelect }) => ( <div onClick={() => onSelect(name)} className={`p-4 rounded-2xl text-center cursor-pointer transition-all duration-200 ${isSelected ? 'bg-[#c96a43] text-white shadow-lg ring-2 ring-white' : 'bg-white hover:bg-[#d2c5b8]'}`}> <div className="text-4xl mb-2">{icon}</div> <p className="font-semibold">{name}</p> </div> );
const Marketplace = ({ onBack, user, onOrderPlaced }) => { const [marketStep, setMarketStep] = useState(1); const [categories, setCategories] = useState([]); const [selectedCategories, setSelectedCategories] = useState([]); const [suppliers, setSuppliers] = useState([]); const [selectedSupplier, setSelectedSupplier] = useState(null); const [isLoading, setIsLoading] = useState(false); const [error, setError] = useState(''); const API_URL = `${API_BASE_URL}/marketplace`; const categoryIcons = { "Vegetables": "🥦", "Fruits": "🍎", "Dairy": "🥛", "Spices": "🌶️", "Oils": "🫒", "Breads": "🍞", "Sauces": "🥫", "Dal & Rice": "🍚" }; useEffect(() => { const fetchCategories = async () => { try { const response = await fetch(`${API_URL}/categories`); const data = await response.json(); setCategories(data); } catch (err) { setError('Failed to load categories.'); } }; fetchCategories(); }, []); const handleCategorySelect = (categoryName) => { setSelectedCategories(prev => prev.includes(categoryName) ? prev.filter(c => c !== categoryName) : [...prev, categoryName] ); }; const findSuppliers = async () => { if (selectedCategories.length === 0) { setError('Please select at least one category.'); return; } if (!user || !user.area) { setError('Your area is not set. Please update your profile.'); return; } setError(''); setIsLoading(true); const categoriesQuery = selectedCategories.join(','); const areaQuery = encodeURIComponent(user.area); try { const response = await fetch(`${API_URL}/suppliers/find-by-area?categories=${categoriesQuery}&area=${areaQuery}`); const data = await response.json(); if (response.ok) { setSuppliers(data); } else if (response.status === 404) { setSuppliers([]); } else { throw new Error(data.message || 'An unexpected server error occurred.'); } } catch (err) { setError(err.message); } finally { setIsLoading(false); } }; const viewSupplierDetails = async (supplierId) => { setIsLoading(true); setError(''); try { const response = await fetch(`${API_URL}/supplier/${supplierId}`); const data = await response.json(); if (!response.ok) throw new Error(data.message); setSelectedSupplier(data); setMarketStep(2); } catch (err) { setError(err.message); } finally { setIsLoading(false); } }; const SupplierCard = ({ supplier }) => ( <div onClick={() => viewSupplierDetails(supplier.id)} className="bg-white p-4 rounded-2xl shadow-md flex justify-between items-center cursor-pointer hover:shadow-xl hover:scale-105 transition-all"> <div> <h3 className="font-bold text-lg text-[#44332d]">{supplier.businessName || supplier.name}</h3> <p className="text-sm text-[#6e665f]">Click to view details</p> </div> <span className="text-xl text-[#c96a43]">&rarr;</span> </div> ); if (marketStep === 2 && selectedSupplier) { return <SupplierDetailPage supplier={selectedSupplier} user={user} onBack={() => setMarketStep(1)} onOrderPlaced={onOrderPlaced} />; } return ( <div className="min-h-screen bg-[#f9f4ef] p-4 sm:p-6"> <div className="container mx-auto"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4 font-semibold">&larr; Back to Dashboard</button> <div> <h1 className="text-2xl sm:text-3xl font-bold text-center text-[#44332d] mb-2">Find Suppliers in Your Area</h1> <p className="text-center text-lg text-[#6e665f] mb-6">Searching in: <span className="font-bold text-[#44332d]">{user?.area || 'Unknown Area'}</span></p> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> {categories.map(cat => ( <CategoryCard key={cat} name={cat} icon={categoryIcons[cat] || '📦'} isSelected={selectedCategories.includes(cat)} onSelect={handleCategorySelect} /> ))} </div> <div className="mt-8 text-center"> <button onClick={findSuppliers} disabled={isLoading} className="bg-[#c96a43] text-white font-bold py-3 px-12 rounded-full hover:bg-[#a35835] transition-all disabled:bg-gray-400"> {isLoading ? 'Searching...' : 'Find Suppliers'} </button> </div> <div className="mt-8"> <h2 className="text-xl font-bold text-center text-[#44332d] mb-6">Results</h2> <div className="space-y-4"> {suppliers.length > 0 ? ( suppliers.map(sup => <SupplierCard key={sup.id} supplier={sup} />) ) : ( <p className="text-center text-[#6e665f] p-8 bg-white rounded-2xl shadow-md">No suppliers found. Try selecting categories and searching.</p> )} </div> </div> </div> {error && <p className="text-center mt-4 text-red-500">{error}</p>} </div> </div> ); };
// const MenuManager = ({ onBack, user, setUser }) => { const [imageFile, setImageFile] = useState(null); const [imagePreview, setImagePreview] = useState(null); const [isLoading, setIsLoading] = useState(false); const [message, setMessage] = useState(''); const [menuItems, setMenuItems] = useState(user.menu || []); useEffect(() => { if (user && user.menu) { setMenuItems(user.menu); } }, [user]); const handleImageChange = (e) => { const file = e.target.files[0]; if (file) { setImageFile(file); setImagePreview(URL.createObjectURL(file)); } }; const handleExtract = async () => { if (!imageFile) return; setIsLoading(true); setMessage('Uploading and analyzing image...'); const reader = new FileReader(); reader.readAsDataURL(imageFile); reader.onloadend = async () => { const base64Data = reader.result.split(',')[1]; try { const response = await fetch(`${API_BASE_URL}/menu/extract`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ imageBase64: base64Data }), }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setMenuItems(data); setMessage('Extraction successful! Please review and save.'); } catch (error) { setMessage(`Error: ${error.message}`); } finally { setIsLoading(false); } }; }; const handleItemChange = (index, field, value) => { const updatedItems = [...menuItems]; updatedItems[index][field] = value; setMenuItems(updatedItems); }; const handleSaveMenu = async () => { setIsLoading(true); try { const response = await fetch(`${API_BASE_URL}/menu/save/${user.id}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ menu: menuItems }), }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setUser(data.vendor); // Update the main user state setMessage('✅ Menu saved successfully!'); } catch (error) { setMessage(`Error: ${error.message}`); } finally { setIsLoading(false); } }; return ( <div className="min-h-screen bg-[#f9f4ef] p-4 sm:p-6"> <div className="container mx-auto"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4 font-semibold">&larr; Back to Dashboard</button> <div className="bg-white p-6 rounded-2xl shadow-lg"> <h2 className="text-2xl font-bold text-[#44332d] mb-4">Manage Your Menu with AI</h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-8"> <div> <h3 className="text-xl font-bold text-[#44332d] mb-2">1. Upload Menu Photo</h3> <input type="file" accept="image/*" onChange={handleImageChange} className="mb-4" /> {imagePreview && <img src={imagePreview} alt="Menu preview" className="rounded-lg shadow-md max-h-64" />} </div> <div> <h3 className="text-xl font-bold text-[#44332d] mb-2">2. Extract Dishes</h3> <button onClick={handleExtract} disabled={!imageFile || isLoading} className="w-full bg-[#c96a43] text-white font-bold py-3 rounded-lg disabled:bg-gray-400"> {isLoading ? 'Analyzing with Gemini...' : 'Extract with AI'} </button> {message && <p className="text-center mt-2 text-sm">{message}</p>} </div> </div> {menuItems.length > 0 && ( <div className="mt-8 border-t pt-6"> <h3 className="text-xl font-bold text-[#44332d] mb-4">3. Review and Save Your Menu</h3> <div className="space-y-2"> {menuItems.map((item, index) => ( <div key={index} className="flex gap-2 items-center"> <input value={item.dishName} onChange={(e) => handleItemChange(index, 'dishName', e.target.value)} className="w-full p-2 border rounded-lg" /> <input type="number" value={item.price} onChange={(e) => handleItemChange(index, 'price', Number(e.target.value))} className="w-24 p-2 border rounded-lg" /> </div> ))} </div> <button onClick={handleSaveMenu} disabled={isLoading} className="w-full mt-4 bg-green-600 text-white font-bold py-3 rounded-lg disabled:bg-gray-400"> {isLoading ? 'Saving...' : 'Save Menu'} </button> </div> )} </div> </div> </div> ); };
const LeftoverMarketplace = ({ onBack, user }) => { const [view, setView] = useState('browse'); const [listings, setListings] = useState([]); const [isLoading, setIsLoading] = useState(false); const [error, setError] = useState(''); const [newItem, setNewItem] = useState({ itemName: '', quantity: '', unit: 'kg', price: '' }); const API_URL = `${API_BASE_URL}/leftovers`; const fetchListings = async () => { if (!user || !user.area) { setError("Your area is not set."); return; } setIsLoading(true); try { const response = await fetch(`${API_URL}?area=${encodeURIComponent(user.area)}&vendorId=${user.id}`); const data = await response.json(); if (response.ok) { setListings(data); } else { setListings([]); } } catch (err) { setError("Failed to fetch listings."); } finally { setIsLoading(false); } }; useEffect(() => { if(view === 'browse') fetchListings(); }, [user, view]); const handleInputChange = (e) => { const { name, value } = e.target; setNewItem(prev => ({ ...prev, [name]: value })); }; const handlePublish = async (e) => { e.preventDefault(); const listingData = { sellerId: user.id, sellerName: user.name, sellerBusinessName: user.businessName || user.name, area: user.area, ...newItem, price: parseFloat(newItem.price), quantity: parseFloat(newItem.quantity) }; setIsLoading(true); try { const response = await fetch(API_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(listingData) }); if (!response.ok) throw new Error("Failed to create listing"); setView('browse'); } catch (err) { setError(err.message); } finally { setIsLoading(false); } }; return ( <div className="min-h-screen bg-[#f9f4ef] p-4 sm:p-6"> <div className="container mx-auto"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4 font-semibold">&larr; Back to Dashboard</button> <div className="flex justify-between items-center mb-6"> <h1 className="text-2xl sm:text-3xl font-bold text-center text-[#44332d]">Leftover Marketplace</h1> <button onClick={() => setView(v => v === 'browse' ? 'sell' : 'browse')} className="bg-[#c96a43] text-white font-bold py-2 px-4 rounded-lg">{view === 'browse' ? 'Sell Your Items' : 'Browse Items'}</button> </div> {view === 'browse' && ( <div className="space-y-4"> {listings.length > 0 ? listings.map(item => ( <div key={item._id} className="bg-white p-4 rounded-lg shadow-md flex justify-between items-center"> <div> <p className="font-bold">{item.itemName} ({item.quantity} {item.unit})</p> <p className="text-sm text-gray-500">From: {item.sellerBusinessName}</p> </div> <button className="bg-green-500 text-white font-bold py-2 px-4 rounded-lg">Buy for ₹{item.price}</button> </div> )) : <p>No leftover items available in your area.</p>} </div> )} {view === 'sell' && ( <div className="max-w-lg mx-auto bg-white p-8 rounded-2xl shadow-xl"> <h2 className="text-xl font-bold text-center text-[#44332d] mb-6">Sell Your Leftover Items</h2> <form onSubmit={handlePublish} className="space-y-4"> <input name="itemName" value={newItem.itemName} onChange={handleInputChange} placeholder="Item Name (e.g., Onion)" required className="w-full px-4 py-3 border rounded-lg" /> <div className="flex gap-4"> <input name="quantity" type="number" value={newItem.quantity} onChange={handleInputChange} placeholder="Quantity" required className="w-full px-4 py-3 border rounded-lg" /> <select name="unit" value={newItem.unit} onChange={handleInputChange} className="px-4 py-3 border rounded-lg"> <option value="kg">kg</option> <option value="litre">litre</option> <option value="dozen">dozen</option> <option value="piece">piece</option> </select> </div> <input name="price" type="number" value={newItem.price} onChange={handleInputChange} placeholder="Total Price (₹)" required className="w-full px-4 py-3 border rounded-lg" /> <button type="submit" disabled={isLoading} className="w-full bg-[#c96a43] text-white font-bold py-3 rounded-lg">{isLoading ? 'Publishing...' : 'Publish Listing'}</button> {error && <p className="text-center text-red-500">{error}</p>} </form> </div> )} </div> </div> ); };
// const MyMenu = ({ onBack, user, setUser }) => { const [menu, setMenu] = useState(user.menu || []); const [message, setMessage] = useState(''); const [isLoading, setIsLoading] = useState(false); const RAW_MATERIALS = ['Potato', 'Flour', 'Oil', 'Spices', 'Onion', 'Cabbage', 'Noodles', 'Soy Sauce', 'Paneer', 'Rice']; const handleIngredientChange = (dishIndex, ingredientIndex, field, value) => { const newMenu = [...menu]; newMenu[dishIndex].ingredients[ingredientIndex][field] = value; setMenu(newMenu); }; const addIngredient = (dishIndex) => { const newMenu = [...menu]; if (!newMenu[dishIndex].ingredients) { newMenu[dishIndex].ingredients = []; } newMenu[dishIndex].ingredients.push({ name: 'Potato', quantity: 0.1, unit: 'kg' }); setMenu(newMenu); }; const handleSaveMenu = async () => { setIsLoading(true); try { const response = await fetch(`${API_BASE_URL}/menu/save/${user.id}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ menu: menu }), }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setUser(data.vendor); setMessage('✅ Menu and recipes saved successfully!'); } catch (error) { setMessage(`Error: ${error.message}`); } finally { setIsLoading(false); } }; return ( <div className="min-h-screen bg-[#f9f4ef] p-4 sm:p-6"> <div className="container mx-auto"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4 font-semibold">&larr; Back to Dashboard</button> <div className="bg-white p-6 rounded-2xl shadow-lg"> <h2 className="text-2xl font-bold text-[#44332d] mb-4">My Menu & Recipes</h2> <p className="text-[#6e665f] mb-6">Here is your menu. Add the ingredients for each dish to unlock smart inventory suggestions.</p> <div className="space-y-6"> {menu.map((dish, dishIndex) => ( <div key={dishIndex} className="bg-gray-50 p-4 rounded-lg border"> <h3 className="text-xl font-bold text-[#44332d]">{dish.dishName} - ₹{dish.price}</h3> <div className="mt-4 space-y-2"> <h4 className="font-semibold text-sm text-gray-500">Ingredients for 1 serving:</h4> {dish.ingredients && dish.ingredients.map((ing, ingIndex) => ( <div key={ingIndex} className="flex gap-2 items-center"> <select value={ing.name} onChange={(e) => handleIngredientChange(dishIndex, ingIndex, 'name', e.target.value)} className="w-full p-2 border rounded-lg"> {RAW_MATERIALS.map(mat => <option key={mat} value={mat}>{mat}</option>)} </select> <input type="number" step="0.01" value={ing.quantity} onChange={(e) => handleIngredientChange(dishIndex, ingIndex, 'quantity', Number(e.target.value))} className="w-24 p-2 border rounded-lg" /> <select value={ing.unit} onChange={(e) => handleIngredientChange(dishIndex, ingIndex, 'unit', e.target.value)} className="p-2 border rounded-lg"> <option>kg</option><option>g</option><option>litre</option><option>ml</option><option>piece</option> </select> </div> ))} <button onClick={() => addIngredient(dishIndex)} className="text-sm text-[#c96a43] font-semibold">+ Add Ingredient</button> </div> </div> ))} </div> <div className="mt-8 border-t pt-6"> <button onClick={handleSaveMenu} disabled={isLoading} className="w-full bg-green-600 text-white font-bold py-3 rounded-lg disabled:bg-gray-400"> {isLoading ? 'Saving...' : 'Save All Recipes'} </button> {message && <p className="text-center mt-4 text-sm">{message}</p>} </div> </div> </div> </div> ); };
const RewardsPage = ({ onBack, user }) => { const Badge = ({ title, icon }) => ( <div className="bg-white p-6 rounded-2xl shadow-lg text-center flex flex-col items-center"> <div className="text-6xl mb-4">{icon}</div> <h3 className="text-xl font-bold text-[#44332d]">{title}</h3> </div> ); return ( <div className="min-h-screen bg-[#f9f4ef] p-4 sm:p-6"> <div className="container mx-auto"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4 font-semibold">&larr; Back to Dashboard</button> <div className="bg-white p-6 rounded-2xl shadow-lg"> <h2 className="text-2xl font-bold text-[#44332d] mb-6">My Rewards</h2> <div className="grid grid-cols-1 md:grid-cols-3 gap-8"> <div className="md:col-span-1"> <h3 className="text-lg font-bold text-[#44332d] mb-4">Your Badges</h3> <div className="space-y-4"> {user.badges && user.badges.map(badge => <Badge key={badge} title={badge} icon="🏆" />)} </div> </div> <div className="md:col-span-2"> <h3 className="text-lg font-bold text-[#44332d] mb-4">Special Offers</h3> <div className="bg-gray-50 p-4 rounded-lg text-center"> <p className="text-[#6e665f]">You have no special offers right now. Keep using Vendor Saathi to unlock exclusive coupons and deals!</p> </div> </div> </div> </div> </div> </div> ); };
// const MenuManager = ({ onBack, user, setUser }) => { const [imageFile, setImageFile] = useState(null); const [imagePreview, setImagePreview] = useState(null); const [isLoading, setIsLoading] = useState(false); const [message, setMessage] = useState(''); const [menuItems, setMenuItems] = useState(user.menu || []); useEffect(() => { if (user && user.menu) { setMenuItems(user.menu); } }, [user]); const handleImageChange = (e) => { const file = e.target.files[0]; if (file) { setImageFile(file); setImagePreview(URL.createObjectURL(file)); } }; const handleExtract = async () => { if (!imageFile) return; setIsLoading(true); setMessage('Uploading and analyzing image...'); const reader = new FileReader(); reader.readAsDataURL(imageFile); reader.onloadend = async () => { const base64Data = reader.result.split(',')[1]; try { const response = await fetch(`${API_BASE_URL}/menu/extract`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ imageBase64: base64Data }), }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setMenuItems(data); setMessage('Extraction successful! Please review and save.'); } catch (error) { setMessage(`Error: ${error.message}`); } finally { setIsLoading(false); } }; }; const handleItemChange = (index, field, value) => { const updatedItems = [...menuItems]; updatedItems[index][field] = value; setMenuItems(updatedItems); }; const handleSaveMenu = async () => { setIsLoading(true); try { const response = await fetch(`${API_BASE_URL}/menu/save/${user.id}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ menu: menuItems }), }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setUser(data.vendor); // Update the main user state setMessage('✅ Menu saved successfully!'); } catch (error) { setMessage(`Error: ${error.message}`); } finally { setIsLoading(false); } }; return ( <div className="min-h-screen bg-[#f9f4ef] p-4 sm:p-6"> <div className="container mx-auto"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4 font-semibold">&larr; Back to Dashboard</button> <div className="bg-white p-6 rounded-2xl shadow-lg"> <h2 className="text-2xl font-bold text-[#44332d] mb-4">Manage Your Menu with AI</h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-8"> <div> <h3 className="text-xl font-bold text-[#44332d] mb-2">1. Upload Menu Photo</h3> <input type="file" accept="image/*" onChange={handleImageChange} className="mb-4" /> {imagePreview && <img src={imagePreview} alt="Menu preview" className="rounded-lg shadow-md max-h-64" />} </div> <div> <h3 className="text-xl font-bold text-[#44332d] mb-2">2. Extract Dishes</h3> <button onClick={handleExtract} disabled={!imageFile || isLoading} className="w-full bg-[#c96a43] text-white font-bold py-3 rounded-lg disabled:bg-gray-400"> {isLoading ? 'Analyzing with Gemini...' : 'Extract with AI'} </button> {message && <p className="text-center mt-2 text-sm">{message}</p>} </div> </div> {menuItems.length > 0 && ( <div className="mt-8 border-t pt-6"> <h3 className="text-xl font-bold text-[#44332d] mb-4">3. Review and Save Your Menu</h3> <div className="space-y-2"> {menuItems.map((item, index) => ( <div key={index} className="flex gap-2 items-center"> <input value={item.dishName} onChange={(e) => handleItemChange(index, 'dishName', e.target.value)} className="w-full p-2 border rounded-lg" /> <input type="number" value={item.price} onChange={(e) => handleItemChange(index, 'price', Number(e.target.value))} className="w-24 p-2 border rounded-lg" /> </div> ))} </div> <button onClick={handleSaveMenu} disabled={isLoading} className="w-full mt-4 bg-green-600 text-white font-bold py-3 rounded-lg disabled:bg-gray-400"> {isLoading ? 'Saving...' : 'Save Menu'} </button> </div> )} </div> </div> </div> ); };
const MenuManager = ({ onBack, user }) => { const [imageFile, setImageFile] = useState(null); const [imagePreview, setImagePreview] = useState(null); const [isLoading, setIsLoading] = useState(false); const [message, setMessage] = useState(''); const [menuItems, setMenuItems] = useState([]); const handleImageChange = (e) => { const file = e.target.files[0]; if (file) { setImageFile(file); setImagePreview(URL.createObjectURL(file)); } }; const handleExtract = async () => { if (!imageFile) return; setIsLoading(true); setMessage('Uploading and analyzing image...'); const reader = new FileReader(); reader.readAsDataURL(imageFile); reader.onloadend = async () => { const base64Data = reader.result.split(',')[1]; try { const response = await fetch(`${API_BASE_URL}/menu/extract`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ imageBase64: base64Data }), }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setMenuItems(data); setMessage('Extraction successful! Please review and save.'); } catch (error) { setMessage(`Error: ${error.message}`); } finally { setIsLoading(false); } }; }; const handleItemChange = (index, field, value) => { const updatedItems = [...menuItems]; updatedItems[index][field] = value; setMenuItems(updatedItems); }; const handleSaveMenu = async () => { setIsLoading(true); try { const response = await fetch(`${API_BASE_URL}/menu/save/${user.id}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ menu: menuItems }), }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setMessage('✅ Menu saved successfully!'); } catch (error) { setMessage(`Error: ${error.message}`); } finally { setIsLoading(false); } }; return ( <div className="min-h-screen bg-[#f9f4ef] p-4 sm:p-6"> <div className="container mx-auto"> <button onClick={onBack} className="text-[#6e665f] hover:text-[#44332d] mb-4 font-semibold">&larr; Back to Dashboard</button> <div className="bg-white p-6 rounded-2xl shadow-lg"> <h2 className="text-2xl font-bold text-[#44332d] mb-4">Manage Your Menu with AI</h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-8"> <div> <h3 className="text-xl font-bold text-[#44332d] mb-2">1. Upload Menu Photo</h3> <input type="file" accept="image/*" onChange={handleImageChange} className="mb-4" /> {imagePreview && <img src={imagePreview} alt="Menu preview" className="rounded-lg shadow-md max-h-64" />} </div> <div> <h3 className="text-xl font-bold text-[#44332d] mb-2">2. Extract Dishes</h3> <button onClick={handleExtract} disabled={!imageFile || isLoading} className="w-full bg-[#c96a43] text-white font-bold py-3 rounded-lg disabled:bg-gray-400"> {isLoading ? 'Analyzing with Gemini...' : 'Extract with AI'} </button> {message && <p className="text-center mt-2 text-sm">{message}</p>} </div> </div> {menuItems.length > 0 && ( <div className="mt-8 border-t pt-6"> <h3 className="text-xl font-bold text-[#44332d] mb-4">3. Review and Save Your Menu</h3> <div className="space-y-2"> {menuItems.map((item, index) => ( <div key={index} className="flex gap-2 items-center"> <input value={item.dishName} onChange={(e) => handleItemChange(index, 'dishName', e.target.value)} className="w-full p-2 border rounded-lg" /> <input type="number" value={item.price} onChange={(e) => handleItemChange(index, 'price', Number(e.target.value))} className="w-24 p-2 border rounded-lg" /> </div> ))} </div> <button onClick={handleSaveMenu} disabled={isLoading} className="w-full mt-4 bg-green-600 text-white font-bold py-3 rounded-lg disabled:bg-gray-400"> {isLoading ? 'Saving...' : 'Save Menu'} </button> </div> )} </div> </div> </div> ); };

// --- Main App Component ---
export default function App() {
    const [view, setView] = useState('landing');
    const [loggedInUser, setLoggedInUser] = useState(null);
    const onOrderPlaced = useRef(null);

    const handleLoginSuccess = (userData) => {
        setLoggedInUser(userData);
        const userRole = userData.role;
        setView(userRole === 'vendor' ? 'vendorDashboard' : 'supplierDashboard');
    };

    const handleLogout = () => {
        setLoggedInUser(null);
        localStorage.removeItem('token');
        setView('landing');
    };

    const renderContent = () => {
        if (loggedInUser) {
            switch (view) {
                case 'vendorDashboard': return <VendorDashboard user={loggedInUser} onLogout={handleLogout} onNavigate={setView} onOrderPlaced={onOrderPlaced} />;
                case 'marketplace': return <Marketplace user={loggedInUser} onBack={() => setView('vendorDashboard')} onOrderPlaced={onOrderPlaced.current} />;
                case 'supplierDashboard': return <SupplierDashboard user={loggedInUser} onLogout={handleLogout} />;
                case 'menuManager': return <MenuManager user={loggedInUser} setUser={setLoggedInUser} onBack={() => setView('vendorDashboard')} />;
                case 'leftoverMarketplace': return <LeftoverMarketplace user={loggedInUser} onBack={() => setView('vendorDashboard')} />;
                case 'rewards': return <RewardsPage user={loggedInUser} onBack={() => setView('vendorDashboard')} />;
                // case 'myMenu': return <MyMenu user={loggedInUser} setUser={setLoggedInUser} onBack={() => setView('vendorDashboard')} />;
                default: return <VendorDashboard user={loggedInUser} onLogout={handleLogout} onNavigate={setView} onOrderPlaced={onOrderPlaced} />;
            }
        }

        switch (view) {
            case 'chooseVendor': return <RoleChoice role="Vendor" onLogin={() => setView('vendorLogin')} onRegister={() => setView('vendorRegister')} onBack={() => setView('landing')} />;
            case 'chooseSupplier': return <RoleChoice role="Supplier" onLogin={() => setView('supplierLogin')} onRegister={() => setView('supplierRegister')} onBack={() => setView('landing')} />;
            case 'vendorLogin': return <VendorAuthForm view="login" onLoginSuccess={handleLoginSuccess} onBack={() => setView('landing')} />;
            case 'vendorRegister': return <VendorAuthForm view="register" onLoginSuccess={handleLoginSuccess} onBack={() => setView('landing')} />;
            case 'supplierLogin': return <SupplierAuthForm view="login" onLoginSuccess={handleLoginSuccess} onBack={() => setView('landing')} />;
            case 'supplierRegister': return <SupplierAuthForm view="register" onLoginSuccess={handleLoginSuccess} onBack={() => setView('landing')} />;
            case 'landing':
            default:
                return (
                    <ClickSpark>
                        <div className="App">
                            <Header onLoginClick={() => setView('chooseVendor')} onRegisterClick={() => setView('chooseVendor')} />
                            <Hero onVendorClick={() => setView('chooseVendor')} onSupplierClick={() => setView('chooseSupplier')} />
                            <WhyChooseUs />
                            <FeaturedCategories />
                            <Testimonials />
                            <Footer />
                        </div>
                    </ClickSpark>
                );
        }
    };

    return <>{renderContent()}</>;
}
